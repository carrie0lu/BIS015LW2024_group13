axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("sandstone"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
box(width = 5),
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "800px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("sandstone"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "800px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "800px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("slate"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "800px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("simplex"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "800px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "800px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
conservatory_families <- conservatory %>%
mutate("region" = native_region) %>%
filter(region != "NA") %>%
filter(region != "Multiple Countries") %>%
filter(region != "Unknown") %>%
filter(family != "Unknown")
conservatory_families %>%
filter(region == "Brazil") %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
theme(axis.title.x = element_text(vjust=-1.5)) +
theme(text = element_text(size = 11),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
conservatory_families %>%
filter(region == "Brazil") %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "800px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "800px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "700px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("superhero"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "700px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("united"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "700px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "700px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel("UC Davis Conservatory Data"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("x", "Select Region", choices = unique(conservatory_families$region), hr())
),
box(width = 5,
plotOutput("plot", width = "800px", height = "700px")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
conservatory_families %>%
filter(region == input$x) %>%
count(family) %>%
ggplot(aes(x = reorder(family, n), y = n, fill = family)) +
geom_col() +
labs(x = "Family",
y = "Count") +
scale_fill_viridis(option = "mako", discrete=TRUE) +
guides(fill = FALSE) +
theme(text = element_text(family = "mono")) +
coord_flip() +
theme(axis.title.y = element_text(margin = margin(r = 10))) +
theme(text = element_text(size = 12),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
})
}
shinyApp(ui, server)
View(conservatory)
